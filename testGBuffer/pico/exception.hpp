/* Copyright (C) 2003, 2004 Mihai Preda.
   See the file LICENSE for license information.
   http://procod.com/picostorage/
*/

#ifndef _EXCEPTION_HPP_
#define _EXCEPTION_HPP_

#include "os.hpp"


    /** Base Exception class.
        The exceptional condition can have two different origins:
        either from the operating system (e.g. disk full), or internal 
        from the PicoStorage library (e.g. invalid storage file).
        To these two categories correspond two subclasses,
        SystemException and CustomException.
     */
    class BaseEx {
    public:
        /** iniWhere must be a static string. */
        BaseEx(const char *iniFile, int iniLine) :
            file(iniFile),
            line(iniLine) {}

        const char *file;
        int line;
    };
    
    /* represents an error originating from the operating system.
        E.g. something like "disk is full", or "disk i/o error".
        os_errno != 0. 
    */
    class SystemEx : public BaseEx {
    public:
        SystemEx(const char *file, int line) : 
            BaseEx(file, line),
            osError(os_getError())
        {}
        int osError;
    };

    /* represents an exception generated by the PicoStorage library.
        E.g. "the storage file is corrupted".
        A CutomEx is not the result of an operating system error.
        os_errno == 0.
    */
    class BadStorageEx : public BaseEx {
    public:
        BadStorageEx(const char *file, int line) :
            BaseEx(file, line) {}
    };

    #define PICOSTORAGE_EX(what) what(__FILE__, __LINE__)


#endif
